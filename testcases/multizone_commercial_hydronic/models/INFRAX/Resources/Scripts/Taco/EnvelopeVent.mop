optimization EnvelopeVent(objectiveIntegrand = (hea.Q_flow/4 + ventilationSystemMpc.total_P+100000*sum(slack))/1e5, startTime=0, finalTime=1e6)
  extends INFRAX.MPC.EnvelopeVent(
	dp_AHU(free=true),
	ddp_AHU(free=true),
	y_vav(each free=true),
	y_coi(each free=true),
	y_hea3way(free=true),
	y_coo3way(free=true),
	y_ahu(free=true)
  	);

 input Real[10] slack(each free=true, each start=0, each min=0, each nominal = 1);
//   input Real dp_AHU2(free=true, start=100, min=0, max=250, nominal=200);
//   input Real ddp_AHU(free=true, start=10, min=10);
 //  input Real[14] y_vav(each free=true, each start=0.5, each min=0, each max=1, each nominal = 1);
//   input Real[21] y_coi(each free=true, each start=0.5, each min=0, each max=1, each nominal = 1);  
//input Real y_hea3way2(free=true, start=0.5, min=0, max=1, nominal = 1);    

     output Real temps[10];
equation
temps={
envelope.floor3.southZone.TSensor,
envelope.floor2.northZone.TSensor,
envelope.floor2.meetingRoom1.TSensor,
envelope.floor2.meetingRoom2.TSensor,
envelope.floor2.southZone.TSensor,
envelope.floor1.meetingRoom1.TSensor,
envelope.floor1.meetingRoom2.TSensor,
envelope.floor1.northZone.TSensor,
envelope.floor1.southZone2.TSensor,
envelope.floor0.meetingRoom2.TSensor};

constraint

temps >=295*ones(10)-slack;
  
end EnvelopeVent;


